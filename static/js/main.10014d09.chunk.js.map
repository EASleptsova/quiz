{"version":3,"sources":["API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/img2.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","props","question","answers","callback","userAnswer","questionNr","totalQuestions","className","map","answer","index","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","bgImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","a","newQuestions","correct_answer","sort","Math","random","slice","length","undefined","e","currentTarget","answerObject","prev","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10014d09.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\"\r\n}\r\nexport const fetchQuestions = async (amount: number, difficulty: Difficulty) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: QuestionState) => {\r\n    return (\r\n      {\r\n        ...question,\r\n        answers: shuffleArray([\r\n          ...question.incorrect_answers, question.correct_answer\r\n        ])\r\n      }\r\n    )\r\n  })\r\n}\r\n\r\nexport type Question_ = {\r\n  correct_answer: string;\r\n  answers: string[];\r\n  question: string;\r\n}\r\nexport const getQuestions = (): Question_[] => {\r\n  return (\r\n    [\r\n      {\r\n        correct_answer: \"Peer to Peer\",\r\n        question: \"What does P2P stand for?\",\r\n        answers: [\r\n          \"Password to Password\",\r\n          \"Product to Product\",\r\n          \"Peer to Peer\",\r\n          \"Private Key to Public Key\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"A computer on a Blockchain network\",\r\n        question: \"What is a node?\",\r\n        answers: [\r\n          \"A computer on a Blockchain network\",\r\n          \"A type of cryptocurrency\",\r\n          \"An exchange\",\r\n          \"A Blockchain\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"Satoshi Nakamoto\",\r\n        question: \"Who created Bitcoin?\",\r\n        answers: [\r\n          \"Samsung\",\r\n          \"Satoshi Nakamoto\",\r\n          \"John Mcafee\",\r\n          \"China\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"Wallet\",\r\n        question: \"Where do you store your cryptocurrency?\",\r\n        answers: [\r\n          \"Bank account\",\r\n          \"Floppy Disk\",\r\n          \"Wallet\",\r\n          \"In your pocket\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"On an exchange\",\r\n        question: \"Where is the LEAST SAFE place to keep your cryptocurrency?\",\r\n        answers: [\r\n          \"In your pocket\",\r\n          \"On an exchange\",\r\n          \"On a hot wallet\",\r\n          \"At your work desk\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"Computers that validate and process blockchain transactions\",\r\n        question: \"What is a miner?\",\r\n        answers: [\r\n          \"A type of blockchain\",\r\n          \"An algorithm that predicts the next part of the chain\",\r\n          \"A person doing calculations to verify a transaction\",\r\n          \"Computers that validate and process blockchain transactions\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"All of the above\",\r\n        question: \"What are the different types of tokens?\",\r\n        answers: [\r\n          \"Platform\",\r\n          \"Privacy\",\r\n          \"Currency\",\r\n          \"All of the above\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"All of the above\",\r\n        question: \"Where can you buy cryptocurrency?\",\r\n        answers: [\r\n          \"A private transaction\",\r\n          \"An exchange\",\r\n          \"A Bitcoin ATM\",\r\n          \"All of the above\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"Mining\",\r\n        question: \"Which is NOT a part of asymmetric encryption?\",\r\n        answers: [\r\n          \"Mining\",\r\n          \"Public key\",\r\n          \"Passphrase\",\r\n          \"Private Key\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"A distributed ledger on a peer to peer network\",\r\n        question: \"What is a blockchain?\",\r\n        answers: [\r\n          \"A distributed ledger on a peer to peer network\",\r\n          \"A type of cryptocurrency\",\r\n          \"An exchange\",\r\n          \"A centralized ledger\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"A decentralized application\",\r\n        question: \"What is a dApp?\",\r\n        answers: [\r\n          \"A type of Cryptocurrency\",\r\n          \"A condiment\",\r\n          \"A type of blockchain\",\r\n          \"A decentralized application\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"A fork\",\r\n        question: \"What is the term for when a blockchain splits?\",\r\n        answers: [\r\n          \"A fork\",\r\n          \"A merger\",\r\n          \"A sidechain\",\r\n          \"A division\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"Prevents double spending\",\r\n        question: \"What is the purpose of a nonce?\",\r\n        answers: [\r\n          \"Follows nouns\",\r\n          \"A hash function\",\r\n          \"Prevents double spending\",\r\n          \"Sends information to the blockchain network\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"A private key not connected to the Internet\",\r\n        question: \"What is cold storage?\",\r\n        answers: [\r\n          \"A place to hang your coat\",\r\n          \"A private key connected to the Internet\",\r\n          \"A private key not connected to the Internet\",\r\n          \"A desktop wallet\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"A block reward\",\r\n        question: \"What incentivizes the miners to give correct validation of transactions?\",\r\n        answers: [\r\n          \"A nonce\",\r\n          \"A block reward\",\r\n          \"Thumbs up from the community\",\r\n          \"More memory\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"The first block of a Blockchain\",\r\n        question: \"What is a genesis block?\",\r\n        answers: [\r\n          \"The first block of a Blockchain\",\r\n          \"A famous block that hardcoded a hash of the Book of Genesis onto the blockchain\",\r\n          \"The first block after each block halving\",\r\n          \"The 2nd transaction of a Blockchain\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"A key NOT to be given to the public\",\r\n        question: \"What is a private key?\",\r\n        answers: [\r\n          \"A key on your key chain\",\r\n          \"A key given to the public\",\r\n          \"A key NOT to be given to the public\",\r\n          \"A key that opens a secret door\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"Gas\",\r\n        question: \"What powers the Ethereum Virtual Machine?\",\r\n        answers: [\r\n          \"Gas\",\r\n          \"Ether\",\r\n          \"Bitcoin\",\r\n          \"Block Rewards\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"Public and Private keys\",\r\n        question: \"Asymmetric encryption uses:\",\r\n        answers: [\r\n          \"Public keys only\",\r\n          \"Private keys only\",\r\n          \"Public and Private keys\",\r\n          \"Proof of Stake\"\r\n        ]\r\n      },\r\n      {\r\n        correct_answer: \"A transaction and block verification protocol\",\r\n        question: \"What is Proof of Stake?\",\r\n        answers: [\r\n          \"A certificate needed to use the blockchain\",\r\n          \"A password needed to access an exchange\",\r\n          \"How private keys are made\",\r\n          \"A transaction and block verification protocol\"\r\n        ]\r\n      },\r\n    ]\r\n  )\r\n}","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n    correct\r\n      ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n      : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    font-size: 1rem;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { AnswerObject } from '../App';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number,\r\n  totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = (props) => {\r\n\r\n  const {\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestions\r\n  } = props;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p>{question}</p>\r\n      <div>\r\n        {answers.map((answer, index) => {\r\n          return (\r\n            <ButtonWrapper\r\n              key={index}\r\n              correct={userAnswer?.correctAnswer === answer}\r\n              userClicked={userAnswer?.answer === answer}\r\n            >\r\n              <button\r\n                disabled={!!userAnswer}\r\n                value={answer}\r\n                onClick={callback}\r\n              >\r\n                <span>{answer}</span>\r\n              </button>\r\n            </ButtonWrapper>\r\n          )\r\n        })}\r\n      </div>\r\n    </Wrapper>\r\n  )\r\n\r\n}\r\nexport default QuestionCard","export default __webpack_public_path__ + \"static/media/img2.322d81ff.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport bgImage from './images/img2.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${bgImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  *{\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', sans-serif;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1{\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport {\n  //fetchQuestions, \n  getQuestions\n} from './API';\nimport {\n  Question_\n  //QuestionState,\n  //Difficulty \n} from './API';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nconst TOTAL_QUESTIONS = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false)\n  //const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [questions, setQuestions] = useState<Question_[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n  const startTrivia = async () => {\n    setLoading(true)\n    setGameOver(false)\n    /* const newQuestions = await fetchQuestions(\n       TOTAL_QUESTIONS,\n       Difficulty.EASY\n     )*/\n    const newQuestions = getQuestions().sort(() => Math.random() - 0.5).slice(0, 10);\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore(score => score + 1)\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n  }\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true)\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>BlockChain Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ?\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n      </button>\n          :\n          null}\n        {!gameOver && <p className=\"score\">Score: {score}</p>}\n        {loading && <p>Loading questions...</p>}\n\n        {!loading && !gameOver && <QuestionCard\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />}\n        {!gameOver &&\n          !loading &&\n          userAnswers.length === number + 1 &&\n          number !== TOTAL_QUESTIONS - 1 ?\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n      </button>\n          : null}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}